// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.2
// source: api/votes.proto

package votes

import (
	common "github.com/GP-Hacks/proto/pkg/api/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetVotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category string `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *GetVotesRequest) Reset() {
	*x = GetVotesRequest{}
	mi := &file_api_votes_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVotesRequest) ProtoMessage() {}

func (x *GetVotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_votes_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVotesRequest.ProtoReflect.Descriptor instead.
func (*GetVotesRequest) Descriptor() ([]byte, []int) {
	return file_api_votes_proto_rawDescGZIP(), []int{0}
}

func (x *GetVotesRequest) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type GetVotesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response []*Vote `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
}

func (x *GetVotesResponse) Reset() {
	*x = GetVotesResponse{}
	mi := &file_api_votes_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVotesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVotesResponse) ProtoMessage() {}

func (x *GetVotesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_votes_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVotesResponse.ProtoReflect.Descriptor instead.
func (*GetVotesResponse) Descriptor() ([]byte, []int) {
	return file_api_votes_proto_rawDescGZIP(), []int{1}
}

func (x *GetVotesResponse) GetResponse() []*Vote {
	if x != nil {
		return x.Response
	}
	return nil
}

type Vote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Category     string                 `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Name         string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description  string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Organization string                 `protobuf:"bytes,5,opt,name=organization,proto3" json:"organization,omitempty"`
	End          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end,proto3" json:"end,omitempty"`
	Options      []string               `protobuf:"bytes,7,rep,name=options,proto3" json:"options,omitempty"`
	Photo        string                 `protobuf:"bytes,8,opt,name=photo,proto3" json:"photo,omitempty"`
}

func (x *Vote) Reset() {
	*x = Vote{}
	mi := &file_api_votes_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_api_votes_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_api_votes_proto_rawDescGZIP(), []int{2}
}

func (x *Vote) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Vote) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Vote) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vote) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Vote) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *Vote) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Vote) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Vote) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

type GetVoteInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoteId int32  `protobuf:"varint,1,opt,name=vote_id,json=voteId,proto3" json:"vote_id,omitempty"`
	Token  string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *GetVoteInfoRequest) Reset() {
	*x = GetVoteInfoRequest{}
	mi := &file_api_votes_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVoteInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVoteInfoRequest) ProtoMessage() {}

func (x *GetVoteInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_votes_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVoteInfoRequest.ProtoReflect.Descriptor instead.
func (*GetVoteInfoRequest) Descriptor() ([]byte, []int) {
	return file_api_votes_proto_rawDescGZIP(), []int{3}
}

func (x *GetVoteInfoRequest) GetVoteId() int32 {
	if x != nil {
		return x.VoteId
	}
	return 0
}

func (x *GetVoteInfoRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type GetRateInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *VoteInfo `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetRateInfoResponse) Reset() {
	*x = GetRateInfoResponse{}
	mi := &file_api_votes_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRateInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRateInfoResponse) ProtoMessage() {}

func (x *GetRateInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_votes_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRateInfoResponse.ProtoReflect.Descriptor instead.
func (*GetRateInfoResponse) Descriptor() ([]byte, []int) {
	return file_api_votes_proto_rawDescGZIP(), []int{4}
}

func (x *GetRateInfoResponse) GetResponse() *VoteInfo {
	if x != nil {
		return x.Response
	}
	return nil
}

type GetPetitionInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *PetitionInfo `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetPetitionInfoResponse) Reset() {
	*x = GetPetitionInfoResponse{}
	mi := &file_api_votes_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPetitionInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPetitionInfoResponse) ProtoMessage() {}

func (x *GetPetitionInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_votes_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPetitionInfoResponse.ProtoReflect.Descriptor instead.
func (*GetPetitionInfoResponse) Descriptor() ([]byte, []int) {
	return file_api_votes_proto_rawDescGZIP(), []int{5}
}

func (x *GetPetitionInfoResponse) GetResponse() *PetitionInfo {
	if x != nil {
		return x.Response
	}
	return nil
}

type GetChoiceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *ChoiceInfo `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetChoiceInfoResponse) Reset() {
	*x = GetChoiceInfoResponse{}
	mi := &file_api_votes_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetChoiceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChoiceInfoResponse) ProtoMessage() {}

func (x *GetChoiceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_votes_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChoiceInfoResponse.ProtoReflect.Descriptor instead.
func (*GetChoiceInfoResponse) Descriptor() ([]byte, []int) {
	return file_api_votes_proto_rawDescGZIP(), []int{6}
}

func (x *GetChoiceInfoResponse) GetResponse() *ChoiceInfo {
	if x != nil {
		return x.Response
	}
	return nil
}

type VoteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Category     string                 `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Name         string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description  string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Organization string                 `protobuf:"bytes,5,opt,name=organization,proto3" json:"organization,omitempty"`
	End          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end,proto3" json:"end,omitempty"`
	Options      []string               `protobuf:"bytes,7,rep,name=options,proto3" json:"options,omitempty"`
	Photo        string                 `protobuf:"bytes,8,opt,name=photo,proto3" json:"photo,omitempty"`
	Mid          float32                `protobuf:"fixed32,9,opt,name=mid,proto3" json:"mid,omitempty"`
	Rate         float32                `protobuf:"fixed32,10,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *VoteInfo) Reset() {
	*x = VoteInfo{}
	mi := &file_api_votes_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteInfo) ProtoMessage() {}

func (x *VoteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_votes_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteInfo.ProtoReflect.Descriptor instead.
func (*VoteInfo) Descriptor() ([]byte, []int) {
	return file_api_votes_proto_rawDescGZIP(), []int{7}
}

func (x *VoteInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *VoteInfo) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *VoteInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VoteInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VoteInfo) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *VoteInfo) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *VoteInfo) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *VoteInfo) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *VoteInfo) GetMid() float32 {
	if x != nil {
		return x.Mid
	}
	return 0
}

func (x *VoteInfo) GetRate() float32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

type PetitionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Category     string                 `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Name         string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description  string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Organization string                 `protobuf:"bytes,5,opt,name=organization,proto3" json:"organization,omitempty"`
	End          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end,proto3" json:"end,omitempty"`
	Options      []string               `protobuf:"bytes,7,rep,name=options,proto3" json:"options,omitempty"`
	Photo        string                 `protobuf:"bytes,8,opt,name=photo,proto3" json:"photo,omitempty"`
	Stats        map[string]int32       `protobuf:"bytes,9,rep,name=stats,proto3" json:"stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Support      string                 `protobuf:"bytes,10,opt,name=support,proto3" json:"support,omitempty"`
}

func (x *PetitionInfo) Reset() {
	*x = PetitionInfo{}
	mi := &file_api_votes_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PetitionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetitionInfo) ProtoMessage() {}

func (x *PetitionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_votes_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetitionInfo.ProtoReflect.Descriptor instead.
func (*PetitionInfo) Descriptor() ([]byte, []int) {
	return file_api_votes_proto_rawDescGZIP(), []int{8}
}

func (x *PetitionInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PetitionInfo) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *PetitionInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PetitionInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PetitionInfo) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *PetitionInfo) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *PetitionInfo) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *PetitionInfo) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *PetitionInfo) GetStats() map[string]int32 {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *PetitionInfo) GetSupport() string {
	if x != nil {
		return x.Support
	}
	return ""
}

type ChoiceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Category     string                 `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Name         string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description  string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Organization string                 `protobuf:"bytes,5,opt,name=organization,proto3" json:"organization,omitempty"`
	End          *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end,proto3" json:"end,omitempty"`
	Options      []string               `protobuf:"bytes,7,rep,name=options,proto3" json:"options,omitempty"`
	Photo        string                 `protobuf:"bytes,8,opt,name=photo,proto3" json:"photo,omitempty"`
	Stats        map[string]int32       `protobuf:"bytes,9,rep,name=stats,proto3" json:"stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Choice       string                 `protobuf:"bytes,10,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *ChoiceInfo) Reset() {
	*x = ChoiceInfo{}
	mi := &file_api_votes_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChoiceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChoiceInfo) ProtoMessage() {}

func (x *ChoiceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_votes_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChoiceInfo.ProtoReflect.Descriptor instead.
func (*ChoiceInfo) Descriptor() ([]byte, []int) {
	return file_api_votes_proto_rawDescGZIP(), []int{9}
}

func (x *ChoiceInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChoiceInfo) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ChoiceInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChoiceInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ChoiceInfo) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *ChoiceInfo) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *ChoiceInfo) GetOptions() []string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ChoiceInfo) GetPhoto() string {
	if x != nil {
		return x.Photo
	}
	return ""
}

func (x *ChoiceInfo) GetStats() map[string]int32 {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ChoiceInfo) GetChoice() string {
	if x != nil {
		return x.Choice
	}
	return ""
}

type VoteRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	VoteId int32   `protobuf:"varint,2,opt,name=vote_id,json=voteId,proto3" json:"vote_id,omitempty"`
	Rating float32 `protobuf:"fixed32,3,opt,name=rating,proto3" json:"rating,omitempty"`
}

func (x *VoteRateRequest) Reset() {
	*x = VoteRateRequest{}
	mi := &file_api_votes_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteRateRequest) ProtoMessage() {}

func (x *VoteRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_votes_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteRateRequest.ProtoReflect.Descriptor instead.
func (*VoteRateRequest) Descriptor() ([]byte, []int) {
	return file_api_votes_proto_rawDescGZIP(), []int{10}
}

func (x *VoteRateRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *VoteRateRequest) GetVoteId() int32 {
	if x != nil {
		return x.VoteId
	}
	return 0
}

func (x *VoteRateRequest) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

type VotePetitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	VoteId  int32  `protobuf:"varint,2,opt,name=vote_id,json=voteId,proto3" json:"vote_id,omitempty"`
	Support string `protobuf:"bytes,3,opt,name=support,proto3" json:"support,omitempty"`
}

func (x *VotePetitionRequest) Reset() {
	*x = VotePetitionRequest{}
	mi := &file_api_votes_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VotePetitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VotePetitionRequest) ProtoMessage() {}

func (x *VotePetitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_votes_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VotePetitionRequest.ProtoReflect.Descriptor instead.
func (*VotePetitionRequest) Descriptor() ([]byte, []int) {
	return file_api_votes_proto_rawDescGZIP(), []int{11}
}

func (x *VotePetitionRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *VotePetitionRequest) GetVoteId() int32 {
	if x != nil {
		return x.VoteId
	}
	return 0
}

func (x *VotePetitionRequest) GetSupport() string {
	if x != nil {
		return x.Support
	}
	return ""
}

type VoteChoiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token  string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	VoteId int32  `protobuf:"varint,2,opt,name=vote_id,json=voteId,proto3" json:"vote_id,omitempty"`
	Choice string `protobuf:"bytes,3,opt,name=choice,proto3" json:"choice,omitempty"`
}

func (x *VoteChoiceRequest) Reset() {
	*x = VoteChoiceRequest{}
	mi := &file_api_votes_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteChoiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteChoiceRequest) ProtoMessage() {}

func (x *VoteChoiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_votes_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteChoiceRequest.ProtoReflect.Descriptor instead.
func (*VoteChoiceRequest) Descriptor() ([]byte, []int) {
	return file_api_votes_proto_rawDescGZIP(), []int{12}
}

func (x *VoteChoiceRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *VoteChoiceRequest) GetVoteId() int32 {
	if x != nil {
		return x.VoteId
	}
	return 0
}

func (x *VoteChoiceRequest) GetChoice() string {
	if x != nil {
		return x.Choice
	}
	return ""
}

type VoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *VoteResponse) Reset() {
	*x = VoteResponse{}
	mi := &file_api_votes_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteResponse) ProtoMessage() {}

func (x *VoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_votes_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteResponse.ProtoReflect.Descriptor instead.
func (*VoteResponse) Descriptor() ([]byte, []int) {
	return file_api_votes_proto_rawDescGZIP(), []int{13}
}

func (x *VoteResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type GetCategoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetCategoriesRequest) Reset() {
	*x = GetCategoriesRequest{}
	mi := &file_api_votes_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCategoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesRequest) ProtoMessage() {}

func (x *GetCategoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_votes_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesRequest.ProtoReflect.Descriptor instead.
func (*GetCategoriesRequest) Descriptor() ([]byte, []int) {
	return file_api_votes_proto_rawDescGZIP(), []int{14}
}

type GetCategoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Categories []string `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
}

func (x *GetCategoriesResponse) Reset() {
	*x = GetCategoriesResponse{}
	mi := &file_api_votes_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCategoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesResponse) ProtoMessage() {}

func (x *GetCategoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_votes_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesResponse.ProtoReflect.Descriptor instead.
func (*GetCategoriesResponse) Descriptor() ([]byte, []int) {
	return file_api_votes_proto_rawDescGZIP(), []int{15}
}

func (x *GetCategoriesResponse) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

var File_api_votes_proto protoreflect.FileDescriptor

var file_api_votes_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x61, 0x70, 0x69, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x3b, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6f,
	0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f, 0x74,
	0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x42, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x6f, 0x74,
	0x65, 0x73, 0x2e, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x94, 0x02, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x22, 0xfc, 0x02, 0x0a, 0x0c, 0x50, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x34, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x2e, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x38, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf6, 0x02, 0x0a, 0x0a, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x03,
	0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x76, 0x6f, 0x74, 0x65,
	0x73, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x58, 0x0a, 0x0f, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6f, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x5e, 0x0a, 0x13, 0x56, 0x6f,
	0x74, 0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x5a, 0x0a, 0x11, 0x56, 0x6f,
	0x74, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x76, 0x6f, 0x74, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x2a, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x37, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x32, 0xf4, 0x04, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x16, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x1b, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x76,
	0x6f, 0x74, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x19, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x56,
	0x6f, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e,
	0x56, 0x6f, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65, 0x50, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x74,
	0x65, 0x50, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x18, 0x2e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x50, 0x2d, 0x48, 0x61, 0x63, 0x6b,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_votes_proto_rawDescOnce sync.Once
	file_api_votes_proto_rawDescData = file_api_votes_proto_rawDesc
)

func file_api_votes_proto_rawDescGZIP() []byte {
	file_api_votes_proto_rawDescOnce.Do(func() {
		file_api_votes_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_votes_proto_rawDescData)
	})
	return file_api_votes_proto_rawDescData
}

var file_api_votes_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_api_votes_proto_goTypes = []any{
	(*GetVotesRequest)(nil),            // 0: votes.GetVotesRequest
	(*GetVotesResponse)(nil),           // 1: votes.GetVotesResponse
	(*Vote)(nil),                       // 2: votes.Vote
	(*GetVoteInfoRequest)(nil),         // 3: votes.GetVoteInfoRequest
	(*GetRateInfoResponse)(nil),        // 4: votes.GetRateInfoResponse
	(*GetPetitionInfoResponse)(nil),    // 5: votes.GetPetitionInfoResponse
	(*GetChoiceInfoResponse)(nil),      // 6: votes.GetChoiceInfoResponse
	(*VoteInfo)(nil),                   // 7: votes.VoteInfo
	(*PetitionInfo)(nil),               // 8: votes.PetitionInfo
	(*ChoiceInfo)(nil),                 // 9: votes.ChoiceInfo
	(*VoteRateRequest)(nil),            // 10: votes.VoteRateRequest
	(*VotePetitionRequest)(nil),        // 11: votes.VotePetitionRequest
	(*VoteChoiceRequest)(nil),          // 12: votes.VoteChoiceRequest
	(*VoteResponse)(nil),               // 13: votes.VoteResponse
	(*GetCategoriesRequest)(nil),       // 14: votes.GetCategoriesRequest
	(*GetCategoriesResponse)(nil),      // 15: votes.GetCategoriesResponse
	nil,                                // 16: votes.PetitionInfo.StatsEntry
	nil,                                // 17: votes.ChoiceInfo.StatsEntry
	(*timestamppb.Timestamp)(nil),      // 18: google.protobuf.Timestamp
	(*common.HealthCheckRequest)(nil),  // 19: common.HealthCheckRequest
	(*common.HealthCheckResponse)(nil), // 20: common.HealthCheckResponse
}
var file_api_votes_proto_depIdxs = []int32{
	2,  // 0: votes.GetVotesResponse.response:type_name -> votes.Vote
	18, // 1: votes.Vote.end:type_name -> google.protobuf.Timestamp
	7,  // 2: votes.GetRateInfoResponse.response:type_name -> votes.VoteInfo
	8,  // 3: votes.GetPetitionInfoResponse.response:type_name -> votes.PetitionInfo
	9,  // 4: votes.GetChoiceInfoResponse.response:type_name -> votes.ChoiceInfo
	18, // 5: votes.VoteInfo.end:type_name -> google.protobuf.Timestamp
	18, // 6: votes.PetitionInfo.end:type_name -> google.protobuf.Timestamp
	16, // 7: votes.PetitionInfo.stats:type_name -> votes.PetitionInfo.StatsEntry
	18, // 8: votes.ChoiceInfo.end:type_name -> google.protobuf.Timestamp
	17, // 9: votes.ChoiceInfo.stats:type_name -> votes.ChoiceInfo.StatsEntry
	0,  // 10: votes.VotesService.GetVotes:input_type -> votes.GetVotesRequest
	14, // 11: votes.VotesService.GetCategories:input_type -> votes.GetCategoriesRequest
	3,  // 12: votes.VotesService.GetRateInfo:input_type -> votes.GetVoteInfoRequest
	3,  // 13: votes.VotesService.GetPetitionInfo:input_type -> votes.GetVoteInfoRequest
	3,  // 14: votes.VotesService.GetChoiceInfo:input_type -> votes.GetVoteInfoRequest
	10, // 15: votes.VotesService.VoteRate:input_type -> votes.VoteRateRequest
	11, // 16: votes.VotesService.VotePetition:input_type -> votes.VotePetitionRequest
	12, // 17: votes.VotesService.VoteChoice:input_type -> votes.VoteChoiceRequest
	19, // 18: votes.VotesService.HealthCheck:input_type -> common.HealthCheckRequest
	1,  // 19: votes.VotesService.GetVotes:output_type -> votes.GetVotesResponse
	15, // 20: votes.VotesService.GetCategories:output_type -> votes.GetCategoriesResponse
	4,  // 21: votes.VotesService.GetRateInfo:output_type -> votes.GetRateInfoResponse
	5,  // 22: votes.VotesService.GetPetitionInfo:output_type -> votes.GetPetitionInfoResponse
	6,  // 23: votes.VotesService.GetChoiceInfo:output_type -> votes.GetChoiceInfoResponse
	13, // 24: votes.VotesService.VoteRate:output_type -> votes.VoteResponse
	13, // 25: votes.VotesService.VotePetition:output_type -> votes.VoteResponse
	13, // 26: votes.VotesService.VoteChoice:output_type -> votes.VoteResponse
	20, // 27: votes.VotesService.HealthCheck:output_type -> common.HealthCheckResponse
	19, // [19:28] is the sub-list for method output_type
	10, // [10:19] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_api_votes_proto_init() }
func file_api_votes_proto_init() {
	if File_api_votes_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_votes_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_votes_proto_goTypes,
		DependencyIndexes: file_api_votes_proto_depIdxs,
		MessageInfos:      file_api_votes_proto_msgTypes,
	}.Build()
	File_api_votes_proto = out.File
	file_api_votes_proto_rawDesc = nil
	file_api_votes_proto_goTypes = nil
	file_api_votes_proto_depIdxs = nil
}
